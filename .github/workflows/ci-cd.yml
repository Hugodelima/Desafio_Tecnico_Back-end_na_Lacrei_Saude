name: CI/CD Pipeline - Lacrei Saúde (Blue/Green Deployment)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DEBUG: 'False'
  CI: 'true'
  GITHUB_ACTIONS: 'true'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: test
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc openssl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt

    - name: Generate SSL certificates for testing
      run: |
        echo "🔐 Gerando certificados SSL para testes..."
        openssl req -x509 -newkey rsa:4096 -nodes \
          -out cert.pem \
          -keyout key.pem \
          -days 1 \
          -subj "/C=BR/ST=Test/L=Test/O=Test/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
        echo "✅ Certificados SSL gerados"

    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL pronto!"
            break
          fi
          echo "Aguardando PostgreSQL... tentativa $i"
          sleep 3
        done

    - name: Run migrations and tests
      run: |
        python manage.py migrate --no-input
        python manage.py test --verbosity=2 --no-input

  blue-green-deploy:
    name: Blue/Green Deployment
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    env:
      PRODUCTION_EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      PRODUCTION_EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine deployment strategy
      uses: appleboy/ssh-action@v0.1.6
      id: env-check
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "🔍 Verificando ambiente atual..."
          
          # Verificar qual ambiente está ativo
          if [ -f "/app/current_environment" ]; then
            CURRENT_ENV=$(cat /app/current_environment)
            echo "current_env=$CURRENT_ENV" >> $GITHUB_OUTPUT
          else
            echo "current_env=blue" >> $GITHUB_OUTPUT
          fi
          
          # Determinar target environment
          if [ "$CURRENT_ENV" = "blue" ]; then
            echo "target_env=green" >> $GITHUB_OUTPUT
            echo "target_port=8001" >> $GITHUB_OUTPUT
            echo "current_port=8000" >> $GITHUB_OUTPUT
          else
            echo "target_env=blue" >> $GITHUB_OUTPUT
            echo "target_port=8000" >> $GITHUB_OUTPUT
            echo "current_port=8001" >> $GITHUB_OUTPUT
          fi
          
          echo "🎯 Current: $CURRENT_ENV, Target: $TARGET_ENV"

    - name: Deploy to target environment
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "🚀 Iniciando Blue/Green Deployment..."
          TARGET_ENV="${{ steps.env-check.outputs.target_env }}"
          TARGET_PORT="${{ steps.env-check.outputs.target_port }}"
          CURRENT_ENV="${{ steps.env-check.outputs.current_env }}"
          
          echo "📊 Target: $TARGET_ENV (Port: $TARGET_PORT)"
          echo "📊 Current: $CURRENT_ENV"
          
          # 1. Preparar diretório do target environment
          echo "📁 Preparando ambiente $TARGET_ENV..."
          cd /app
          sudo mkdir -p $TARGET_ENV
          cd $TARGET_ENV
          
          # 2. Clonar/atualizar código
          if [ ! -d "lacrei-api" ]; then
            echo "📦 Clonando repositório..."
            git clone https://github.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude.git lacrei-api
          fi
          
          cd lacrei-api
          echo "🔄 Atualizando código..."
          git fetch origin main
          git reset --hard origin/main
          git clean -fd
          
          # 3. Configurar environment variables
          echo "⚙️ Configurando variáveis de ambiente..."
          cat > .env << EOF
            DEBUG=False
            DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
            DATABASE_URL=postgresql://postgres:postgres@db:5432/lacrei_db
            ALLOWED_HOSTS=localhost,127.0.0.1,${{ secrets.PRODUCTION_EC2_HOST }},.amazonaws.com
            PORT=$TARGET_PORT
            EOF
          
          # 4. Configurar SSL
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
            echo "🔐 Gerando certificados SSL..."
            sudo openssl req -x509 -newkey rsa:4096 -nodes \
              -out cert.pem \
              -keyout key.pem \
              -days 365 \
              -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          # 5. Subir containers no target environment
          echo "🐳 Iniciando containers em $TARGET_ENV..."
          docker-compose -p $TARGET_ENV up --build -d
          
          # 6. Health check do target environment
          echo "🏥 Health check do ambiente $TARGET_ENV..."
          sleep 20
          
          if curl -k https://localhost:$TARGET_PORT/api/ > /dev/null 2>&1; then
            echo "✅ Ambiente $TARGET_ENV está saudável!"
            
            # 7. Atualizar Nginx (switch de tráfego)
            echo "🔄 Atualizando Nginx para apontar para $TARGET_ENV..."
            sudo bash -c 'cat > /etc/nginx/conf.d/lacrei-api.conf << EOF
            upstream lacrei_api {
                server 127.0.0.1:$TARGET_PORT;
            }

            server {
                listen 80;
                server_name _;
                
                location / {
                    proxy_pass http://lacrei_api;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF'
            
            # 8. Recarregar Nginx
            sudo nginx -t && sudo nginx -s reload
            echo "✅ Nginx configurado para $TARGET_ENV"
            
            # 9. Atualizar ambiente atual
            echo "$TARGET_ENV" | sudo tee /app/current_environment > /dev/null
            
            # 10. Parar ambiente antigo
            echo "🛑 Parando ambiente antigo $CURRENT_ENV..."
            docker-compose -p $CURRENT_ENV down --volumes --remove-orphans || true
            
            echo "🎉 Blue/Green deployment completo! Tráfego agora em $TARGET_ENV"
          else
            echo "❌ Ambiente $TARGET_ENV falhou no health check"
            echo "↩️ Abortando deployment - Mantendo $CURRENT_ENV"
            docker-compose -p $TARGET_ENV down --volumes --remove-orphans
            exit 1
          fi

  rollback:
    name: Rollback Emergency
    runs-on: ubuntu-latest
    environment: production
    if: failure()
    
    env:
      PRODUCTION_EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      PRODUCTION_EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
    
    steps:
    - name: Execute Emergency Rollback
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "🚨 INICIANDO ROLLBACK DE EMERGÊNCIA"
          
          if [ -f "/app/current_environment" ]; then
            CURRENT_ENV=$(cat /app/current_environment)
            
            # Determinar ambiente anterior
            if [ "$CURRENT_ENV" = "blue" ]; then
              PREVIOUS_ENV="green"
              PREVIOUS_PORT="8001"
            else
              PREVIOUS_ENV="blue"
              PREVIOUS_PORT="8000"
            fi
            
            echo "↩️ Voltando para ambiente anterior: $PREVIOUS_ENV"
            
            # 1. Parar ambiente atual problemático
            docker-compose -p $CURRENT_ENV down --volumes --remove-orphans || true
            
            # 2. Levantar ambiente anterior
            cd /app/$PREVIOUS_ENV/lacrei-api
            docker-compose -p $PREVIOUS_ENV up -d
            
            # 3. Health check do ambiente anterior
            sleep 15
            if curl -k https://localhost:$PREVIOUS_PORT/api/ > /dev/null 2>&1; then
              echo "✅ Ambiente $PREVIOUS_ENV está saudável!"
              
              # 4. Atualizar Nginx
              sudo bash -c 'cat > /etc/nginx/conf.d/lacrei-api.conf << EOF
              upstream lacrei_api {
                  server 127.0.0.1:$PREVIOUS_PORT;
              }

              server {
                  listen 80;
                  server_name _;
                  
                  location / {
                      proxy_pass http://lacrei_api;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto \$scheme;
                  }
              }
              EOF'
              
              # 5. Recarregar Nginx
              sudo nginx -t && sudo nginx -s reload
              
              # 6. Atualizar ambiente atual
              echo "$PREVIOUS_ENV" | sudo tee /app/current_environment > /dev/null
              
              echo "✅ Rollback de emergência completo! Tráfego em $PREVIOUS_ENV"
            else
              echo "❌ Rollback falhou - Ambiente anterior também não está saudável"
              exit 1
            fi
          else
            echo "❌ Não foi possível determinar ambiente atual"
            exit 1
          fi

  health-monitoring:
    name: Health Monitoring
    runs-on: ubuntu-latest
    needs: blue-green-deploy
    if: always()
    
    env:
      PRODUCTION_EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      PRODUCTION_EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
    
    steps:
    - name: Monitor environments
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "📊 HEALTH MONITORING REPORT"
          echo "==========================="
          
          # Verificar ambiente atual
          if [ -f "/app/current_environment" ]; then
            ACTIVE_ENV=$(cat /app/current_environment)
            echo "✅ Ambiente Ativo: $ACTIVE_ENV"
          else
            echo "❌ Nenhum ambiente configurado como ativo"
          fi
          
          # Verificar status dos ambientes
          for env in blue green; do
            echo ""
            echo "--- Ambiente $env ---"
            
            if [ -d "/app/$env/lacrei-api" ]; then
              cd /app/$env/lacrei-api
              
              # Verificar se containers estão rodando
              if docker-compose -p $env ps | grep -q "Up"; then
                echo "✅ Containers: RUNNING"
                
                # Determinar porta
                if [ "$env" = "blue" ]; then
                  PORT=8000
                else
                  PORT=8001
                fi
                
                # Health check
                if curl -k https://localhost:$PORT/api/ > /dev/null 2>&1; then
                  echo "✅ Health Check: PASSED"
                else
                  echo "❌ Health Check: FAILED"
                fi
              else
                echo "❌ Containers: STOPPED"
              fi
            else
              echo "❌ Diretório: NOT FOUND"
            fi
          done
          
          # Verificar Nginx
          echo ""
          echo "--- Nginx ---"
          if sudo nginx -t 2>/dev/null; then
            echo "✅ Nginx Configuration: VALID"
          else
            echo "❌ Nginx Configuration: INVALID"
          fi
          
          if systemctl is-active --quiet nginx; then
            echo "✅ Nginx Service: RUNNING"
          else
            echo "❌ Nginx Service: STOPPED"
          fi