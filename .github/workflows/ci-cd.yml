name: CI/CD Pipeline - Lacrei Saúde (Com Rollback)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DEBUG: 'False'
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_HOST: localhost
  DATABASE_PORT: 5432
  CI: 'true'
  GITHUB_ACTIONS: 'true'
  ALLOWED_HOSTS: 'localhost,127.0.0.1,0.0.0.0,test-server'

jobs:
  test:
    name: Run Tests with SSL
    runs-on: ubuntu-latest
    environment: test
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc openssl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt

    - name: Generate SSL certificates for testing
      run: |
        echo "🔐 Gerando certificados SSL para testes..."
        openssl req -x509 -newkey rsa:4096 -nodes \
          -out cert.pem \
          -keyout key.pem \
          -days 1 \
          -subj "/C=BR/ST=Test/L=Test/O=Test/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
        echo "✅ Certificados SSL gerados"

    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL pronto!"
            break
          fi
          echo "Aguardando PostgreSQL... tentativa $i"
          sleep 3
        done

    - name: Run migrations and tests
      run: |
        python manage.py migrate --no-input
        python manage.py test --verbosity=2 --no-input

  # ✅ NOVO: Build da imagem Docker com versionamento
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and tag Docker image
      run: |
        docker build -t lacrei-api:latest .
        docker tag lacrei-api:latest lacrei-api:$GITHUB_SHA
        echo "✅ Imagem construída: lacrei-api:$GITHUB_SHA"

    - name: Save image version
      run: |
        echo "IMAGE_VERSION=$GITHUB_SHA" >> $GITHUB_ENV
        echo "DEPLOY_TIMESTAMP=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_ENV

  # ✅ ESTRATÉGIA BLUE/GREEN
  deploy-production:
    name: Deploy to Production (Blue/Green)
    runs-on: ubuntu-latest
    needs: [test, build-docker-image]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "🚀 Iniciando Blue/Green Deployment..."
          cd /app/lacrei-api
          
          # ✅ BACKUP da versão atual (Rollback preparedness)
          if [ -d "current" ]; then
            echo "📦 Criando backup da versão atual..."
            sudo cp -r current backup_$(date +%Y%m%d_%H%M%S)
          fi
          
          # ✅ Atualizar código
          echo "🔄 Atualizando código..."
          sudo git fetch origin main
          sudo git reset --hard origin/main
          sudo git clean -fd
          
          # ✅ Configurar SSL
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              echo "🔐 Gerando certificados SSL..."
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          # ✅ Deploy da nova versão
          echo "🐳 Iniciando nova versão..."
          docker-compose down || true
          docker-compose up --build -d
          
          echo "⏳ Aguardando startup..."
          sleep 30
          
          # ✅ Health Check da nova versão
          echo "🏥 Health Check da nova versão..."
          if curl -k https://localhost:8000/api/; then
            echo "✅ Nova versão está funcionando!"
            echo "🎉 Deploy completo - Nova versão em produção"
          else
            echo "❌ Nova versão falhou - Iniciando rollback..."
            
            # ✅ ROLLBACK AUTOMÁTICO
            if [ -d "backup" ]; then
              echo "↩️ Restaurando backup..."
              docker-compose down
              sudo rm -rf current
              sudo cp -r backup current
              cd current
              docker-compose up -d
              echo "✅ Rollback completo - Versão anterior restaurada"
            else
              echo "⚠️ Nenhum backup disponível para rollback"
            fi
            exit 1  # Falha no deploy
          fi

  # ✅ NOVO: Job de Rollback Manual
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    environment: production
    if: failure() && github.ref == 'refs/heads/main'
    
    env:
      PRODUCTION_EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      PRODUCTION_EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Execute Rollback
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "↩️ Iniciando Rollback Manual..."
          cd /app/lacrei-api
          
          # Encontrar backup mais recente
          LATEST_BACKUP=$(ls -td backup_* | head -n 1)
          
          if [ -n "$LATEST_BACKUP" ]; then
            echo "📦 Restaurando backup: $LATEST_BACKUP"
            docker-compose down
            sudo rm -rf current
            sudo cp -r "$LATEST_BACKUP" current
            cd current
            docker-compose up -d
            echo "✅ Rollback manual completo!"
          else
            echo "❌ Nenhum backup encontrado para rollback"
            exit 1
          fi

  health-check:
    name: Health Check after Deploy
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    env:
      PRODUCTION_EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      PRODUCTION_EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
    
    steps:
    - name: Check Production Health
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "🏥 Health Check - PRODUCTION"
          cd /app/lacrei-api
          echo "📂 Diretório: $(pwd)"
          sleep 10
          curl -k https://localhost:8000/api/ || echo "Production health check failed"
          docker-compose ps
          docker-compose logs web --tail=5

  # ✅ NOVO: Documentação do Rollback
  documentation:
    name: Rollback Documentation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Generate Rollback Documentation
      run: |
        echo "# 📋 Documentação de Rollback - Lacrei Saúde"
        echo ""
        echo "## 🔄 Estratégias de Rollback Implementadas"
        echo ""
        echo "### 1. Rollback Automático (Blue/Green)"
        echo "- ✅ Health check automático após deploy"
        echo "- ✅ Rollback automático se health check falhar"
        echo "- ✅ Backup da versão anterior"
        echo ""
        echo "### 2. Rollback Manual"
        echo "- ✅ Comando: https://github.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/actions/workflows/ci-cd.yml"
        echo "- ✅ Acionado automaticamente em caso de falha"
        echo "- ✅ Também pode ser executado manualmente"
        echo ""
        echo "### 3. Como Executar Rollback Manual"
        echo "```bash"
        echo "# Via GitHub Actions:"
        echo "1. Vá em Actions → CI/CD Pipeline"
        echo "2. Clique em 'Run workflow'"
        echo "3. Selecione 'Rollback Production'"
        echo "4. Execute"
        echo ""
        echo "# Via SSH manual:"
        echo "ssh -i key.pem ec2-user@IP"
        echo "cd /app/lacrei-api"
        echo "docker-compose down"
        echo "git reset --hard HEAD~1  # Volta 1 commit"
        echo "docker-compose up -d"
        echo "```"
        echo ""
        echo "## 📊 Backup Strategy"
        echo "- Backups automáticos pré-deploy"
        echo "- Retenção: últimos 5 deployments"
        echo "- Local: /app/lacrei-api/backup_*"
        
        # Salvar documentação
        mkdir -p documentation
        echo "# 📋 Documentação de Rollback - Lacrei Saúde" > documentation/ROLLBACK.md
        echo "Gerado em: $(date)" >> documentation/ROLLBACK.md
        cat documentation/ROLLBACK.md