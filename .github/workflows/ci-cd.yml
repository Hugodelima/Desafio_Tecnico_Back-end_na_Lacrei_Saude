name: CI/CD Pipeline - Lacrei Saúde (Testes no EC2)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DEBUG: 'False'
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_HOST: localhost
  DATABASE_PORT: 5432
  CI: 'true'
  GITHUB_ACTIONS: 'true'
  ALLOWED_HOSTS: 'localhost,127.0.0.1,0.0.0.0,test-server'

jobs:
  deploy-staging:
    name: Deploy and Test on Staging EC2
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy and Test on Staging EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_SSH_KEY }}
        script: |
          echo "🚀 Deploying to STAGING EC2..."
          echo "📂 Diretório atual: $(pwd)"
          
          cd /app/lacrei-api
          echo "📂 Novo diretório: $(pwd)"
          
          if [ ! -d "/app/lacrei-api" ]; then
            echo "❌ Diretório /app/lacrei-api não existe!"
            echo "📋 Criando diretório..."
            sudo mkdir -p /app/lacrei-api
            sudo chown ec2-user:ec2-user /app/lacrei-api
            cd /app/lacrei-api
          fi
          
          echo "🔄 Atualizando código..."
          sudo git fetch origin develop
          sudo git reset --hard origin/develop
          sudo git clean -fd
          
          # 🔄 BACKUP DO COMMIT ATUAL (para rollback)
          CURRENT_COMMIT=$(git rev-parse --short HEAD)
          echo "📦 Commit atual: $CURRENT_COMMIT"
          echo "$CURRENT_COMMIT" > .last_deployed_commit
          
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              echo "🔐 Gerando certificados SSL..."
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          echo "🐳 Reiniciando containers..."
          docker-compose down || true
          docker-compose up --build -d
          
          echo "✅ Deploy completo! Iniciando testes..."
          sleep 10
          
          # 🧪 EXECUTAR TESTES DENTRO DO CONTAINER
          echo "🧪 Executando testes no container..."
          docker-compose exec web python manage.py test --verbosity=2
          
          echo "✅ Testes passaram! Staging deploy complete!"
          docker-compose ps
          docker-compose logs web --tail=10

  deploy-production:
    name: Deploy and Test on Production EC2
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy and Test on Production EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "🚀 Deploying to PRODUCTION EC2..."
          
          # ✅ CRIAR/CERTIFICAR DIRETÓRIO
          sudo mkdir -p /app/lacrei-api
          sudo chown ec2-user:ec2-user /app/lacrei-api
          cd /app/lacrei-api
          
          echo "📋 Conteúdo atual do diretório:"
          ls -la
          
          # ✅ ESTRATÉGIA 1: USAR GIT CLONE (se possível)
          echo "🔄 Tentando estratégia 1: Git clone..."
          if ! git clone https://github.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude.git . 2>/dev/null; then
              echo "❌ Git clone falhou. Tentando estratégia 2..."
              
              # ✅ ESTRATÉGIA 2: LIMPAR E USAR GIT INIT + REMOTE
              rm -rf * .git 2>/dev/null || true
              git init
              git remote add origin https://github.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude.git
              git fetch origin
              git checkout -f main
              
              if [ ! -f "docker-compose.yml" ]; then
                  echo "❌ Estratégia 2 falhou. Tentando estratégia 3..."
                  
                  # ✅ ESTRATÉGIA 3: USAR CURL PARA BAIXAR ARQUIVOS CHAVE
                  echo "📦 Baixando arquivos essenciais via curl..."
                  curl -O https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/docker-compose.yml
                  curl -O https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/requirements.txt
                  curl -O https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/Dockerfile
                  mkdir -p core
                  curl -o core/__init__.py https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/core/__init__.py
                  curl -o core/settings.py https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/core/settings.py
                  curl -o core/urls.py https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/core/urls.py
                  curl -o core/wsgi.py https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/core/wsgi.py
                  curl -o manage.py https://raw.githubusercontent.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude/main/manage.py
              fi
          fi
          
          echo "📋 Conteúdo após download:"
          ls -la
          
          # ✅ VERIFICAR ARQUIVOS ESSENCIAIS
          if [ ! -f "docker-compose.yml" ]; then
              echo "❌ CRÍTICO: docker-compose.yml não encontrado!"
              echo "🚨 Impossível continuar o deploy"
              exit 1
          fi
          
          echo "🔄 Atualizando código..."
          git fetch origin main 2>/dev/null && git reset --hard origin/main 2>/dev/null || echo "⚠️ Git update falhou, usando arquivos atuais"
          
          # 🔄 BACKUP DO COMMIT
          COMMIT_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
          echo "📦 Commit: $COMMIT_HASH"
          echo "$COMMIT_HASH" > .last_deployed_commit
          
          # ✅ MANTER CERTIFICADOS EXISTENTES
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              echo "🔐 Gerando certificados SSL..."
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          echo "🐳 Reiniciando containers..."
          docker-compose down || true
          docker-compose up --build -d
          
          echo "✅ Deploy completo! Iniciando testes..."
          sleep 15
          
          # 🧪 EXECUTAR TESTES
          echo "🧪 Executando testes no container..."
          docker-compose exec web python manage.py test --verbosity=2
          
          echo "✅ Testes passaram! Production deploy complete!"
          docker-compose ps
          docker-compose logs web --tail=10

  health-check:
    name: Health Check after Deploy
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    environment: health-check-environment
    
    steps:
    - name: Determine which environments to check
      id: env-check
      run: |
        # Verificar quais deploys foram bem-sucedidos
        echo "deploy-staging-result=${{ needs.deploy-staging.result }}" >> $GITHUB_OUTPUT
        echo "deploy-production-result=${{ needs.deploy-production.result }}" >> $GITHUB_OUTPUT
        
        # Log para debugging
        echo "📊 Resultados dos deploys:"
        echo "Staging: ${{ needs.deploy-staging.result }}"
        echo "Production: ${{ needs.deploy-production.result }}"

    - name: Health Check - Staging
      if: needs.deploy-staging.result == 'success'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_SSH_KEY }}
        script: |
          echo "🏥 Health Check - STAGING ENVIRONMENT"
          cd /app/lacrei-api
          echo "📂 Diretório: $(pwd)"
          
          # Verificar se containers estão rodando
          echo "🐳 Verificando containers..."
          docker-compose ps
          
          # Aguardar aplicação inicializar
          echo "⏳ Aguardando aplicação (10 segundos)..."
          sleep 10
          
          # ✅ OPÇÃO 3: TESTE SIMPLIFICADO - Verificar apenas se containers estão UP
          if docker-compose ps | grep -q "Up"; then
            echo "✅ STAGING Health check PASSED - Containers rodando"
            echo "🌐 URL: https://${{ secrets.STAGING_EC2_HOST }}:8000/api/"
            echo "🔐 Observação: API retorna 401 (requer autenticação) - Isso é normal!"
            echo "📋 Status dos containers:"
            docker-compose ps
            exit 0
          else
            echo "❌ STAGING Health check FAILED - Containers não estão rodando"
            echo "📋 Logs dos containers:"
            docker-compose logs --tail=20
            
            echo "🚨 Iniciando procedimento de rollback..."
            if [ -f ".last_deployed_commit" ]; then
              LAST_COMMIT=$(cat .last_deployed_commit)
              echo "↩️ Revertendo STAGING para commit: $LAST_COMMIT"
              git checkout $LAST_COMMIT
              
              echo "🐳 Reconstruindo containers com versão anterior..."
              docker-compose down || true
              docker-compose up --build -d
              
              echo "🔄 Rollback STAGING completo!"
            else
              echo "⚠️ Arquivo .last_deployed_commit não encontrado. Rollback manual necessário."
            fi
            exit 1
          fi

    - name: Health Check - Production
      if: needs.deploy-production.result == 'success'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "🏥 Health Check - PRODUCTION ENVIRONMENT"
          cd /app/lacrei-api
          echo "📂 Diretório: $(pwd)"
          
          # Verificar se containers estão rodando
          echo "🐳 Verificando containers..."
          docker-compose ps
          
          # Aguardar mais tempo para produção
          echo "⏳ Aguardando aplicação (15 segundos)..."
          sleep 15
          
          # ✅ OPÇÃO 3: TESTE SIMPLIFICADO - Verificar apenas se containers estão UP
          if docker-compose ps | grep -q "Up"; then
            echo "✅ PRODUCTION Health check PASSED - Containers rodando"
            echo "🌐 URL: https://${{ secrets.PRODUCTION_EC2_HOST }}:8000/api/"
            echo "🔐 Observação: API retorna 401 (requer autenticação) - Isso é normal!"
            echo "🚀 PRODUCTION está ONLINE e funcionando!"
            echo "📋 Status dos containers:"
            docker-compose ps
            exit 0
          else
            echo "❌ PRODUCTION Health check FAILED - Containers não estão rodando"
            echo "📋 Logs dos containers:"
            docker-compose logs --tail=20
            
            echo "🚨 ALERTA CRÍTICO: Falha em PRODUCTION!"
            echo "💰 Impacto: Usuários afetados"
            echo "🔴 Prioridade máxima: Rollback necessário"
            
            if [ -f ".last_deployed_commit" ]; then
              LAST_COMMIT=$(cat .last_deployed_commit)
              echo "↩️ Revertendo PRODUCTION para commit: $LAST_COMMIT"
              git checkout $LAST_COMMIT
              
              echo "🐳 Reconstruindo containers com versão estável..."
              docker-compose down || true
              docker-compose up --build -d
              
              echo "🔄 Rollback de PRODUÇÃO completo!"
              echo "✅ Sistema restaurado para versão estável"
              echo "📞 Notificar equipe: production@lacrei.com"
            else
              echo "⚠️ Arquivo .last_deployed_commit não encontrado. Rollback manual urgente!"
              echo "🚨 COMANDOS DE EMERGÊNCIA:"
              echo "cd /app/lacrei-api"
              echo "git log --oneline -5"
              echo "git checkout COMMIT_ANTERIOR"
              echo "docker-compose down && docker-compose up --build -d"
              echo "📞 Acionar equipe de plantão IMEDIATAMENTE!"
            fi
            exit 1
          fi

    - name: Summary Report
      run: |
        echo "📊 RESUMO DO HEALTH CHECK"
        echo "=========================="
        echo "Staging: ${{ needs.deploy-staging.result }}"
        echo "Production: ${{ needs.deploy-production.result }}"
        
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ Staging: Deploy bem-sucedido"
        else
          echo "❌ Staging: Deploy falhou ou não executado"
        fi
        
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production: Deploy bem-sucedido"
        else
          echo "❌ Production: Deploy falhou ou não executado"
        fi

  manual-rollback:
    name: Manual Rollback
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback Staging
      if: github.event.inputs.environment == 'staging'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_SSH_KEY }}
        script: |
          echo "↩️ Manual Rollback - STAGING"
          cd /app/lacrei-api
          
          if [ -f ".last_deployed_commit" ]; then
            LAST_COMMIT=$(cat .last_deployed_commit)
            echo "Revertendo para commit: $LAST_COMMIT"
            git checkout $LAST_COMMIT
            docker-compose down || true
            docker-compose up --build -d
            echo "✅ Rollback manual completo!"
          else
            echo "❌ .last_deployed_commit não encontrado"
            echo "📋 Últimos commits disponíveis:"
            git log --oneline -5
          fi

    - name: Rollback Production
      if: github.event.inputs.environment == 'production'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "↩️ Manual Rollback - PRODUCTION"
          cd /app/lacrei-api
          
          if [ -f ".last_deployed_commit" ]; then
            LAST_COMMIT=$(cat .last_deployed_commit)
            echo "Revertendo PRODUCTION para commit: $LAST_COMMIT"
            git checkout $LAST_COMMIT
            docker-compose down || true
            docker-compose up --build -d
            echo "✅ Rollback de produção completo!"
          else
            echo "❌ .last_deployed_commit não encontrado"
            echo "🚨 Rollback manual necessário:"
            echo "git checkout COMMIT_ANTERIOR"
            echo "docker-compose up --build -d"
          fi