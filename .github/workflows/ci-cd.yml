name: CI/CD Pipeline - Lacrei Sa√∫de (Com Rollback)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DEBUG: 'False'
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_HOST: localhost
  DATABASE_PORT: 5432
  CI: 'true'
  GITHUB_ACTIONS: 'true'
  ALLOWED_HOSTS: 'localhost,127.0.0.1,0.0.0.0,test-server'

jobs:
  test:
    name: Run Tests with SSL
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc openssl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt

    - name: Generate SSL certificates for testing
      run: |
        echo "üîê Gerando certificados SSL para testes..."
        openssl req -x509 -newkey rsa:4096 -nodes \
          -out cert.pem \
          -keyout key.pem \
          -days 1 \
          -subj "/C=BR/ST=Test/L=Test/O=Test/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
        echo "‚úÖ Certificados SSL gerados"

    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "‚úÖ PostgreSQL pronto!"
            break
          fi
          echo "Aguardando PostgreSQL... tentativa $i"
          sleep 3
        done

    - name: Run migrations and tests
      run: |
        python manage.py migrate --no-input
        python manage.py test --verbosity=2 --no-input

  deploy-staging:
    name: Deploy to Staging EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_SSH_KEY }}
        script: |
          echo "üöÄ Deploying to STAGING EC2..."
          echo "üìÇ Diret√≥rio atual: $(pwd)"
          
          cd /app/lacrei-api
          echo "üìÇ Novo diret√≥rio: $(pwd)"
          
          if [ ! -d "/app/lacrei-api" ]; then
            echo "‚ùå Diret√≥rio /app/lacrei-api n√£o existe!"
            echo "üìã Criando diret√≥rio..."
            sudo mkdir -p /app/lacrei-api
            sudo chown ec2-user:ec2-user /app/lacrei-api
            cd /app/lacrei-api
          fi
          
          echo "üîÑ Atualizando c√≥digo..."
          sudo git fetch origin develop
          sudo git reset --hard origin/develop
          sudo git clean -fd
          
          # üîÑ BACKUP DO COMMIT ATUAL (para rollback)
          CURRENT_COMMIT=$(git rev-parse --short HEAD)
          echo "üì¶ Commit atual: $CURRENT_COMMIT"
          echo "$CURRENT_COMMIT" > .last_deployed_commit
          
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              echo "üîê Gerando certificados SSL..."
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          echo "üê≥ Reiniciando containers..."
          docker-compose down || true
          docker-compose up --build -d
          
          echo "‚úÖ Staging deploy complete!"
          docker-compose ps
          docker-compose logs web --tail=10

  deploy-production:
    name: Deploy to Production EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "üöÄ Deploying to PRODUCTION EC2..."
          echo "üìÇ Diret√≥rio atual: $(pwd)"
          
          cd /app/lacrei-api
          echo "üìÇ Novo diret√≥rio: $(pwd)"
          
          if [ ! -d "/app/lacrei-api" ]; then
            echo "‚ùå Diret√≥rio /app/lacrei-api n√£o existe!"
            echo "üìã Criando diret√≥rio..."
            sudo mkdir -p /app/lacrei-api
            sudo chown ec2-user:ec2-user /app/lacrei-api
            cd /app/lacrei-api
            echo "üì¶ Clonando reposit√≥rio..."
            git clone https://github.com/Hugodelima/Desafio_Tecnico_Back-end_na_Lacrei_Saude.git . || true
          fi
          
          echo "üîÑ Atualizando c√≥digo..."
          sudo git fetch origin main
          sudo git reset --hard origin/main
          sudo git clean -fd
          
          # üîÑ BACKUP DO COMMIT ATUAL (para rollback)
          CURRENT_COMMIT=$(git rev-parse --short HEAD)
          echo "üì¶ Commit atual: $CURRENT_COMMIT"
          echo "$CURRENT_COMMIT" > .last_deployed_commit
          
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              echo "üîê Gerando certificados SSL..."
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          echo "üê≥ Reiniciando containers..."
          docker-compose down || true
          docker-compose up --build -d
          
          echo "‚úÖ Production deploy complete!"
          docker-compose ps
          docker-compose logs web --tail=10

  health-check:
    name: Health Check after Deploy
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    env:
      STAGING_EC2_HOST: ${{ secrets.STAGING_EC2_HOST }}
      PRODUCTION_EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      STAGING_EC2_SSH_KEY: ${{ secrets.STAGING_EC2_SSH_KEY }}
      PRODUCTION_EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
    
    steps:
    - name: Check Staging Health
      if: needs.deploy-staging.result == 'success'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_SSH_KEY }}
        script: |
          echo "üè• Health Check - STAGING"
          cd /app/lacrei-api
          echo "üìÇ Diret√≥rio: $(pwd)"
          sleep 10
          
          # Teste completo de sa√∫de
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -k https://localhost:8000/api/ || echo "000")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Health check PASSED - Status: $HTTP_STATUS"
            exit 0
          else
            echo "‚ùå Health check FAILED - Status: $HTTP_STATUS"
            echo "üö® Iniciando procedimento de rollback..."
            
            # üì¶ ROLLBACK AUTOM√ÅTICO
            if [ -f ".last_deployed_commit" ]; then
              LAST_COMMIT=$(cat .last_deployed_commit)
              echo "‚Ü©Ô∏è Revertendo para commit: $LAST_COMMIT"
              git checkout $LAST_COMMIT
              
              echo "üê≥ Reconstruindo containers com vers√£o anterior..."
              docker-compose down || true
              docker-compose up --build -d
              
              echo "üîÑ Rollback completo!"
            else
              echo "‚ö†Ô∏è Arquivo .last_deployed_commit n√£o encontrado. Rollback manual necess√°rio."
            fi
            exit 1
          fi

    - name: Check Production Health
      if: needs.deploy-production.result == 'success'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "üè• Health Check - PRODUCTION"
          cd /app/lacrei-api
          echo "üìÇ Diret√≥rio: $(pwd)"
          sleep 15  # ‚è∞ Mais tempo para produ√ß√£o
          
          # Teste completo de sa√∫de
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -k https://localhost:8000/api/ || echo "000")
          
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Health check PASSED - Status: $HTTP_STATUS"
            exit 0
          else
            echo "‚ùå Health check FAILED - Status: $HTTP_STATUS"
            echo "üö® ALERTA: Falha em PRODUCTION - Rollback necess√°rio"
            
            # üì¶ ROLLBACK AUTOM√ÅTICO PARA PRODU√á√ÉO
            if [ -f ".last_deployed_commit" ]; then
              LAST_COMMIT=$(cat .last_deployed_commit)
              echo "‚Ü©Ô∏è Revertendo PRODUCTION para commit: $LAST_COMMIT"
              git checkout $LAST_COMMIT
              
              echo "üê≥ Reconstruindo containers com vers√£o est√°vel..."
              docker-compose down || true
              docker-compose up --build -d
              
              echo "üîÑ Rollback de PRODU√á√ÉO completo!"
              echo "üìû Notificar equipe: production@lacrei.com"
            else
              echo "‚ö†Ô∏è Arquivo .last_deployed_commit n√£o encontrado. Rollback manual urgente!"
              echo "üìû Acionar equipe de plant√£o imediatamente!"
            fi
            exit 1
          fi

  manual-rollback:
    name: Manual Rollback
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch'
    
    env:
      STAGING_EC2_HOST: ${{ secrets.STAGING_EC2_HOST }}
      PRODUCTION_EC2_HOST: ${{ secrets.PRODUCTION_EC2_HOST }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      STAGING_EC2_SSH_KEY: ${{ secrets.STAGING_EC2_SSH_KEY }}
      PRODUCTION_EC2_SSH_KEY: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback Staging
      if: github.event.inputs.environment == 'staging'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_SSH_KEY }}
        script: |
          echo "‚Ü©Ô∏è Manual Rollback - STAGING"
          cd /app/lacrei-api
          
          if [ -f ".last_deployed_commit" ]; then
            LAST_COMMIT=$(cat .last_deployed_commit)
            echo "Revertendo para commit: $LAST_COMMIT"
            git checkout $LAST_COMMIT
            docker-compose down || true
            docker-compose up --build -d
            echo "‚úÖ Rollback manual completo!"
          else
            echo "‚ùå .last_deployed_commit n√£o encontrado"
            echo "üìã √öltimos commits dispon√≠veis:"
            git log --oneline -5
          fi

    - name: Rollback Production
      if: github.event.inputs.environment == 'production'
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}
        script: |
          echo "‚Ü©Ô∏è Manual Rollback - PRODUCTION"
          cd /app/lacrei-api
          
          if [ -f ".last_deployed_commit" ]; then
            LAST_COMMIT=$(cat .last_deployed_commit)
            echo "Revertendo PRODUCTION para commit: $LAST_COMMIT"
            git checkout $LAST_COMMIT
            docker-compose down || true
            docker-compose up --build -d
            echo "‚úÖ Rollback de produ√ß√£o completo!"
          else
            echo "‚ùå .last_deployed_commit n√£o encontrado"
            echo "üö® Rollback manual necess√°rio:"
            echo "git checkout COMMIT_ANTERIOR"
            echo "docker-compose up --build -d"
          fi