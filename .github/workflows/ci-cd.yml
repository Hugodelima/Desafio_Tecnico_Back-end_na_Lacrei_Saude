name: CI/CD Pipeline - Lacrei Sa√∫de (Staging + Production)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DEBUG: 'False'
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_HOST: localhost
  DATABASE_PORT: 5432
  CI: 'true'
  GITHUB_ACTIONS: 'true'
  ALLOWED_HOSTS: 'localhost,127.0.0.1,0.0.0.0,test-server'

jobs:
  test:
    name: Run Tests with SSL
    runs-on: ubuntu-latest
    environment: test
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc openssl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt

    - name: Generate SSL certificates for testing
      run: |
        echo "üîê Gerando certificados SSL para testes..."
        openssl req -x509 -newkey rsa:4096 -nodes \
          -out cert.pem \
          -keyout key.pem \
          -days 1 \
          -subj "/C=BR/ST=Test/L=Test/O=Test/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
        echo "‚úÖ Certificados SSL gerados"

    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "‚úÖ PostgreSQL pronto!"
            break
          fi
          sleep 3
        done

    - name: Run migrations and tests
      run: |
        python manage.py migrate --no-input
        python manage.py test --verbosity=2 --no-input

  deploy-staging:
    name: Deploy to Staging EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'  # ‚Üê DEPLOY NA DEVELOP
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_EC2_HOST }}  # ‚Üê IP DA STAGING
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.STAGING_EC2_SSH_KEY }}  # ‚Üê CHAVE DA STAGING
        script: |
          echo "üöÄ Deploying to STAGING..."
          cd /app/lacrei-api
          
          # Script de deploy
          sudo git fetch origin develop
          sudo git reset --hard origin/develop
          sudo git clean -fd
          
          # Configurar SSL se necess√°rio
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          docker-compose down || true
          docker-compose up --build -d
          echo "‚úÖ Staging deploy complete!"

  deploy-production:
    name: Deploy to Production EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'  # ‚Üê DEPLOY NA MAIN
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production EC2
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_EC2_HOST }}  # ‚Üê IP DA PRODUCTION
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.PRODUCTION_EC2_SSH_KEY }}  # ‚Üê CHAVE DA PRODUCTION
        script: |
          echo "üöÄ Deploying to PRODUCTION..."
          cd /app/lacrei-api
          
          sudo git fetch origin main
          sudo git reset --hard origin/main
          sudo git clean -fd
          
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          docker-compose down || true
          docker-compose up --build -d
          echo "‚úÖ Production deploy complete!"

  deploy-render:
    name: Deploy to Render (Backup)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Render
      env:
        RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
      run: |
        echo "‚òÅÔ∏è Deploying to Render..."
        curl -X POST "$RENDER_DEPLOY_HOOK_URL" || echo "Render deploy optional"