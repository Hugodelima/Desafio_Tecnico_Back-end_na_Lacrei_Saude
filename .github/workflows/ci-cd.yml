name: CI/CD Pipeline - Lacrei Saúde (Amazon Linux + HTTPS)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DEBUG: 'False'
  POSTGRES_DB: test_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_HOST: localhost
  DATABASE_PORT: 5432
  CI: 'true'
  GITHUB_ACTIONS: 'true'
  ALLOWED_HOSTS: 'localhost,127.0.0.1,0.0.0.0,test-server'

jobs:
  test:
    name: Run Tests with SSL
    runs-on: ubuntu-latest
    environment: test
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev gcc openssl

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt

    - name: Generate SSL certificates for testing
      run: |
        echo "🔐 Gerando certificados SSL para testes..."
        openssl req -x509 -newkey rsa:4096 -nodes \
          -out cert.pem \
          -keyout key.pem \
          -days 1 \  # Certificado de 1 dia para testes
          -subj "/C=BR/ST=Test/L=Test/O=Test/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
        
        ls -la cert.pem key.pem
        echo "✅ Certificados SSL gerados"

    - name: Wait for PostgreSQL to be ready
      run: |
        echo "⏳ Aguardando PostgreSQL iniciar..."
        for i in {1..10}; do
          if pg_isready -h localhost -p 5432 -U postgres; then
            echo "✅ PostgreSQL está pronto!"
            break
          fi
          echo "Aguardando PostgreSQL... tentativa $i"
          sleep 3
        done

    - name: Run migrations
      run: |
        python manage.py migrate --no-input

    - name: Create test data
      run: |
        echo "📊 Preparando ambiente de teste..."
        python -c "
          import os
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
          import django
          django.setup()
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(username='admin').exists():
              User.objects.create_superuser('admin', 'admin@test.com', 'password')
              print('✅ Superusuário criado')
          else:
              print('ℹ️ Superusuário já existe')
          print('✅ Ambiente preparado para testes')
        "

    - name: Run Django tests
      run: |
        echo "🧪 Executando testes Django..."
        python manage.py test --verbosity=2 --no-input

    - name: Test SSL configuration
      run: |
        echo "🔐 Testando configuração SSL..."
        # Testar se o settings.py carrega corretamente com SSL
        python -c "
          import os
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
          import django
          from django.conf import settings
          django.setup()
          print('✅ Settings carregado com SSL')
          print(f'DEBUG: {settings.DEBUG}')
          print(f'ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}')
          print(f'SSL Certificate exists: {hasattr(settings, \"SSL_CERTIFICATE_EXISTS\") and settings.SSL_CERTIFICATE_EXISTS}')
        "

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Generate SSL certificates for Docker
      run: |
        echo "🔐 Gerando certificados SSL para Docker..."
        openssl req -x509 -newkey rsa:4096 -nodes \
          -out cert.pem \
          -keyout key.pem \
          -days 365 \
          -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost" \
          -addext "subjectAltName=DNS:localhost,IP:127.0.0.1"
        echo "✅ Certificados SSL gerados para Docker"

    - name: Build Docker image
      run: |
        echo "🐳 Construindo imagem Docker..."
        docker build -t lacrei-api:latest .

    - name: Test Docker image
      run: |
        echo "🧪 Testando imagem Docker..."
        docker run --rm lacrei-api:latest python -c "
          import os
          print('✅ Imagem Docker funcionando')
          print('Python:', os.sys.version)
        "

  deploy-ec2:
    name: Deploy to Amazon EC2
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate deployment script
      run: |
        echo "📦 Criando script de deploy para EC2..."
        cat > deploy-ec2.sh << 'EOF'
        #!/bin/bash
        set -e

        echo "🚀 Iniciando deploy no EC2..."

        # Configurações
        APP_DIR="/app/lacrei-api"
        BACKUP_DIR="/app/backups/$(date +%Y%m%d_%H%M%S)"

        # Criar backup do diretório atual
        echo "📦 Criando backup..."
        sudo mkdir -p $BACKUP_DIR
        sudo cp -r $APP_DIR/* $BACKUP_DIR/ 2>/dev/null || true

        # Parar containers atuais
        echo "🐳 Parando containers..."
        cd $APP_DIR
        docker-compose down || true

        # Atualizar código
        echo "🔄 Atualizando código..."
        sudo git fetch origin main
        sudo git reset --hard origin/main
        sudo git clean -fd

        # Configurar SSL se necessário
        if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
            echo "🔐 Gerando certificados SSL..."
            sudo openssl req -x509 -newkey rsa:4096 -nodes \
              -out cert.pem \
              -keyout key.pem \
              -days 365 \
              -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
        fi

        # Dar permissões
        echo "🔒 Ajustando permissões..."
        sudo chmod +x setup_ssl.sh 2>/dev/null || true
        sudo chmod 644 cert.pem 2>/dev/null || true
        sudo chmod 600 key.pem 2>/dev/null || true

        # Reconstruir e iniciar containers
        echo "🐳 Reconstruindo containers..."
        docker-compose up --build -d

        # Verificar status
        echo "📊 Verificando status..."
        sleep 10
        docker-compose ps
        docker-compose logs web --tail=20

        # Testar aplicação
        echo "🧪 Testando aplicação..."
        curl -k https://localhost:8000/api/ || echo "Teste inicial falhou - aguardando startup..."

        echo "✅ Deploy concluído com sucesso!"
        EOF
        chmod +x deploy-ec2.sh
        cat deploy-ec2.sh

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🚀 Iniciando deploy automático no EC2..."
          cd /app/lacrei-api
          
          # Criar script de deploy temporário
          cat > /tmp/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          cd /app/lacrei-api
          echo "📦 Atualizando código..."
          sudo git fetch origin main
          sudo git reset --hard origin/main
          sudo git clean -fd
          
          echo "🔐 Configurando SSL..."
          if [ ! -f "cert.pem" ] || [ ! -f "key.pem" ]; then
              sudo openssl req -x509 -newkey rsa:4096 -nodes \
                -out cert.pem \
                -keyout key.pem \
                -days 365 \
                -subj "/C=BR/ST=Sao_Paulo/L=Sao_Paulo/O=Lacrei_Saude/CN=localhost"
          fi
          
          echo "🐳 Reconstruindo containers..."
          docker-compose down || true
          docker-compose up --build -d
          
          echo "✅ Deploy concluído!"
          EOF
          
          chmod +x /tmp/deploy.sh
          sudo /tmp/deploy.sh

    - name: Verify deployment
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "🔍 Verificando deploy..."
          sleep 15
          cd /app/lacrei-api
          docker-compose ps
          docker-compose logs web --tail=10
          curl -k https://localhost:8000/api/ || echo "Aplicação ainda inicializando..."

  deploy-render:
    name: Deploy to Render (Backup)
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Render
      env:
        RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
      run: |
        echo "☁️ Acionando deploy no Render (backup)..."
        curl -X POST "$RENDER_DEPLOY_HOOK_URL" || echo "Render deploy hook falhou - pode ser normal se não configurado"
        echo "Deploy no Render acionado!"